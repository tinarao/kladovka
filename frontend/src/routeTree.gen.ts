/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedDashboardImport } from './routes/_protected/_dashboard'
import { Route as ProtectedDashboardDashboardIndexImport } from './routes/_protected/_dashboard/dashboard/index'
import { Route as ProtectedDashboardDashboardProjectIdImport } from './routes/_protected/_dashboard/dashboard/$projectId'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const ProtectedDashboardDashboardCreateProjectLazyImport = createFileRoute(
  '/_protected/_dashboard/dashboard/create-project',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedDashboardDashboardIndexRoute =
  ProtectedDashboardDashboardIndexImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => ProtectedDashboardRoute,
  } as any)

const ProtectedDashboardDashboardCreateProjectLazyRoute =
  ProtectedDashboardDashboardCreateProjectLazyImport.update({
    id: '/dashboard/create-project',
    path: '/dashboard/create-project',
    getParentRoute: () => ProtectedDashboardRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_dashboard/dashboard/create-project.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedDashboardDashboardProjectIdRoute =
  ProtectedDashboardDashboardProjectIdImport.update({
    id: '/dashboard/$projectId',
    path: '/dashboard/$projectId',
    getParentRoute: () => ProtectedDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/_dashboard': {
      id: '/_protected/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/_dashboard/dashboard/$projectId': {
      id: '/_protected/_dashboard/dashboard/$projectId'
      path: '/dashboard/$projectId'
      fullPath: '/dashboard/$projectId'
      preLoaderRoute: typeof ProtectedDashboardDashboardProjectIdImport
      parentRoute: typeof ProtectedDashboardImport
    }
    '/_protected/_dashboard/dashboard/create-project': {
      id: '/_protected/_dashboard/dashboard/create-project'
      path: '/dashboard/create-project'
      fullPath: '/dashboard/create-project'
      preLoaderRoute: typeof ProtectedDashboardDashboardCreateProjectLazyImport
      parentRoute: typeof ProtectedDashboardImport
    }
    '/_protected/_dashboard/dashboard/': {
      id: '/_protected/_dashboard/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardDashboardIndexImport
      parentRoute: typeof ProtectedDashboardImport
    }
  }
}

// Create and export the route tree

interface ProtectedDashboardRouteChildren {
  ProtectedDashboardDashboardProjectIdRoute: typeof ProtectedDashboardDashboardProjectIdRoute
  ProtectedDashboardDashboardCreateProjectLazyRoute: typeof ProtectedDashboardDashboardCreateProjectLazyRoute
  ProtectedDashboardDashboardIndexRoute: typeof ProtectedDashboardDashboardIndexRoute
}

const ProtectedDashboardRouteChildren: ProtectedDashboardRouteChildren = {
  ProtectedDashboardDashboardProjectIdRoute:
    ProtectedDashboardDashboardProjectIdRoute,
  ProtectedDashboardDashboardCreateProjectLazyRoute:
    ProtectedDashboardDashboardCreateProjectLazyRoute,
  ProtectedDashboardDashboardIndexRoute: ProtectedDashboardDashboardIndexRoute,
}

const ProtectedDashboardRouteWithChildren =
  ProtectedDashboardRoute._addFileChildren(ProtectedDashboardRouteChildren)

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedDashboardRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/dashboard/$projectId': typeof ProtectedDashboardDashboardProjectIdRoute
  '/dashboard/create-project': typeof ProtectedDashboardDashboardCreateProjectLazyRoute
  '/dashboard': typeof ProtectedDashboardDashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedDashboardRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/dashboard/$projectId': typeof ProtectedDashboardDashboardProjectIdRoute
  '/dashboard/create-project': typeof ProtectedDashboardDashboardCreateProjectLazyRoute
  '/dashboard': typeof ProtectedDashboardDashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/_protected/_dashboard': typeof ProtectedDashboardRouteWithChildren
  '/_protected/_dashboard/dashboard/$projectId': typeof ProtectedDashboardDashboardProjectIdRoute
  '/_protected/_dashboard/dashboard/create-project': typeof ProtectedDashboardDashboardCreateProjectLazyRoute
  '/_protected/_dashboard/dashboard/': typeof ProtectedDashboardDashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/dashboard/$projectId'
    | '/dashboard/create-project'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/dashboard/$projectId'
    | '/dashboard/create-project'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login'
    | '/register'
    | '/_protected/_dashboard'
    | '/_protected/_dashboard/dashboard/$projectId'
    | '/_protected/_dashboard/dashboard/create-project'
    | '/_protected/_dashboard/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginLazyRoute: typeof LoginLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/_dashboard"
      ]
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/_protected/_dashboard": {
      "filePath": "_protected/_dashboard.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/_dashboard/dashboard/$projectId",
        "/_protected/_dashboard/dashboard/create-project",
        "/_protected/_dashboard/dashboard/"
      ]
    },
    "/_protected/_dashboard/dashboard/$projectId": {
      "filePath": "_protected/_dashboard/dashboard/$projectId.tsx",
      "parent": "/_protected/_dashboard"
    },
    "/_protected/_dashboard/dashboard/create-project": {
      "filePath": "_protected/_dashboard/dashboard/create-project.lazy.tsx",
      "parent": "/_protected/_dashboard"
    },
    "/_protected/_dashboard/dashboard/": {
      "filePath": "_protected/_dashboard/dashboard/index.tsx",
      "parent": "/_protected/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
